name: docker

on:
  workflow_dispatch:
  # schedule:
  #   - cron: '0 0 * * *' # 每天早上0点

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

jobs:
  mirror:
    name: Mirror ${{ matrix.image }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image: 
          - "oryd/hydra:v2.2.0"
          # - "oryd/kratos:v1.3.1"
          # - "gitea/gitea:1.22.6"
          # - "gitea/act_runner:0.2.11"
          # - "gitea/runner-images:ubuntu-latest"
          # - "gitea/runner-images:ubuntu-22.04"
          # - "gitea/runner-images:ubuntu-20.04"
          # - "drone/drone:2.24.0"
          # - "drone/drone-runner-docker:1.8.2"
          # - "drone/drone-runner-ssh:1.0.1"
          # - "nginx:1.23.3"
          # - "nginx:1.23.3-alpine"
          # - "redis:7.0.4"
          # - "redis:7.0.4-alpine"
          # - "louislam/uptime-kuma:1.23.16"
          # - "onlyoffice/documentserver:8.1.1"
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Mirror
      - name: Mirror ${{ matrix.image }} to ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image }}
        run: |
          # docker login -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}
          image="${{ matrix.image }}"
          image_mirror="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.image }}"
          docker manifest inspect $image
          platforms=($(docker manifest inspect $image | jq -r '.manifests[] | select(.platform.os == "linux") | select(.platform.architecture != "unknown") | "\(.platform.architecture)|\(.platform.os)|\(.platform.variant)"'))
          echo "platforms: ${platforms[@]}"
          platform_manifests=()
          for platform in "${platforms[@]}"; do
            IFS='|' read -ra arr <<< "$platform"
            architecture=${arr[0]}
            os=${arr[1]}
            variant=${arr[2]}
            if [ "$variant" == "null" ] || [ "$variant" == "" ]; then
              echo "os: $os, architecture: $architecture"
              docker pull --platform $os/$architecture $image
              docker tag $image $image_mirror-$os-$architecture
              docker push $image_mirror-$os-$architecture
              platform_manifests+=("$image_mirror-$os-$architecture")
            else
              echo "os: $os, architecture: $architecture, variant: $variant"
              docker pull --platform $os/$architecture/$variant $image
              docker tag $image $image_mirror-$os-$architecture-$variant
              docker push $image_mirror-$os-$architecture-$variant
              platform_manifests+=("$image_mirror-$os-$architecture-$variant")
            fi
          done
          docker manifest create $image_mirror ${platform_manifests[@]}
          docker manifest push $image_mirror
